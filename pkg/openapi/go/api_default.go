/*
 * Nexus-MP Sidecar Agent API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"RegisterServer": Route{
			strings.ToUpper("Post"),
			"/register",
			c.RegisterServer,
		},
		"ReportHealth": Route{
			strings.ToUpper("Post"),
			"/health",
			c.ReportHealth,
		},
	}
}

// RegisterServer - Register a game server
func (c *DefaultAPIController) RegisterServer(w http.ResponseWriter, r *http.Request) {
	gameServerInfoParam := GameServerInfo{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&gameServerInfoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGameServerInfoRequired(gameServerInfoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGameServerInfoConstraints(gameServerInfoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RegisterServer(r.Context(), gameServerInfoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReportHealth - Report game server health
func (c *DefaultAPIController) ReportHealth(w http.ResponseWriter, r *http.Request) {
	healthCheckPayloadParam := HealthCheckPayload{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&healthCheckPayloadParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertHealthCheckPayloadRequired(healthCheckPayloadParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertHealthCheckPayloadConstraints(healthCheckPayloadParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ReportHealth(r.Context(), healthCheckPayloadParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
